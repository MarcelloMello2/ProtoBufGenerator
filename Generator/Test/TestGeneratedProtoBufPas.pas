unit TestGeneratedProtoBufPas;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  {$IFDEF FPC}
  fpcunit, testregistry,
  {$ELSE}
  TestFramework,
  System.Generics.Collections,
  {$ENDIF}
  uAbstractProtoBufClasses,
  test1,
  Classes;

type
  // Test methods for class TTestMsg1

  { TestTTestMsg1 }

  TestTTestMsg1 = class(TTestCase)
  strict private
    FTestMsg1: TTestMsg1;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveLoadFromBuf;
    procedure TestFieldHasValue;
  end;

implementation

procedure TestTTestMsg1.SetUp;
begin
  FTestMsg1 := TTestMsg1.Create;
end;

procedure TestTTestMsg1.TearDown;
begin
  FTestMsg1.Free;
  FTestMsg1 := nil;
end;

procedure TestTTestMsg1.TestSaveLoadFromBuf;
var
  Stream: TStream;
  tmp: TTestMsg1;
  i: Integer;
begin
  FTestMsg1.DefField1 := 1;
  FTestMsg1.DefField2 := 3;
  FTestMsg1.DefField3 := 'asôâàóöé';
  FTestMsg1.DefField4 := -2.5;
  FTestMsg1.DefField5 := True;
  FTestMsg1.DefField6 := TEnumG0.g2;
  FTestMsg1.DefField7 := -12;
  FTestMsg1.DefField8 := 45432;
  FTestMsg1.DefField9 := 5.5;
  FTestMsg1.FieldArr1List.Add(-5);
  FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr1List]:= True;
  FTestMsg1.FieldArr2List.Add(234);
  FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr2List]:= True;
  FTestMsg1.FieldArr3List.Add('asdfçöóêãøò');
  FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr3List]:= True;

  tmp := TTestMsg1.Create;
  try
    Stream := TMemoryStream.Create;
    try
      FTestMsg1.SaveToStream(Stream);
      Stream.Seek(0, soBeginning);
      tmp.LoadFromStream(Stream);
    finally
      Stream.Free;
    end;

    CheckEquals(FTestMsg1.DefField1, tmp.DefField1);
    CheckEquals(FTestMsg1.DefField2, tmp.DefField2);
    CheckEquals(FTestMsg1.DefField3, tmp.DefField3);
    CheckEquals(FTestMsg1.DefField4, tmp.DefField4);
    CheckEquals(FTestMsg1.DefField5, tmp.DefField5);
    CheckEquals(Integer(FTestMsg1.DefField6), Integer(tmp.DefField6));
    CheckEquals(FTestMsg1.DefField7, tmp.DefField7);
    CheckEquals(FTestMsg1.DefField8, tmp.DefField8);
    CheckEquals(FTestMsg1.DefField9, tmp.DefField9);

    CheckEquals(FTestMsg1.FieldArr1List.Count, tmp.FieldArr1List.Count);
    for i := 0 to FTestMsg1.FieldArr1List.Count-1 do
       CheckEquals(FTestMsg1.FieldArr1List[i], tmp.FieldArr1List[i]);

    CheckEquals(FTestMsg1.FieldArr2List.Count, tmp.FieldArr2List.Count);
    for i := 0 to FTestMsg1.FieldArr2List.Count-1 do
       CheckEquals(FTestMsg1.FieldArr2List[i], tmp.FieldArr2List[i]);

    CheckEquals(FTestMsg1.FieldArr3List.Count, tmp.FieldArr3List.Count);
    for i := 0 to FTestMsg1.FieldArr3List.Count-1 do
       CheckEquals(FTestMsg1.FieldArr3List[i], tmp.FieldArr3List[i]);
  finally
    tmp.Free;
  end;
end;

procedure TestTTestMsg1.TestFieldHasValue;
begin
  Check(FTestMsg1.FieldHasValue[TTestMsg1.tag_DefField1], 'FieldHasValue for DefField1 should be initially True since it has a Default value');
  FTestMsg1.FieldHasValue[TTestMsg1.tag_DefField1]:= False;
  Check(not FTestMsg1.FieldHasValue[TTestMsg1.tag_DefField1], 'FieldHasValue for DefField1 should be False after explicitly setting it');
  FTestMsg1.DefField1 := 1;
  Check(FTestMsg1.FieldHasValue[TTestMsg1.tag_DefField1], 'FieldHasValue for DefField1 should be set to True by generated Setter');

  Check(not FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr1List], 'FieldHasValue for FieldArr1List should be initially False');
  FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr1List]:= True;
  Check(FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr1List], 'FieldHasValue for FieldArr1List should be True after explicitly setting it');
  //not really required for Test:
  //FTestMsg1.FieldArr2List.Add(234);
  FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr1List]:= False;
  Check(not FTestMsg1.FieldHasValue[TTestMsg1.tag_FieldArr1List], 'FieldHasValue for FieldArr1List not cleared after explicitly setting it to False');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest('GeneratedProtoBufPas', TestTTestMsg1.Suite);
end.
